//------------------------------------------------------------------------------
// This is auto-generated code.
//------------------------------------------------------------------------------
// This code was generated by Entity Developer tool using EF Core template.
// Code is generated on: 2025. 04. 25. 11:07:30
//
// Changes to this file may cause incorrect behavior and will be lost if
// the code is regenerated.
//------------------------------------------------------------------------------

using System;
using System.Collections.Generic;
using System.ComponentModel;
using System.Data;
using System.Data.Common;
using System.Linq;
using System.Linq.Expressions;
using System.Reflection;
using System.Threading.Tasks;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Internal;
using Microsoft.EntityFrameworkCore.Metadata;

namespace Model
{

    public partial class Model : DbContext
    {

        public Model() :
            base()
        {
            OnCreated();
        }

        public Model(DbContextOptions<Model> options) :
            base(options)
        {
            OnCreated();
        }

        protected override void OnConfiguring(DbContextOptionsBuilder optionsBuilder)
        {
            if (!optionsBuilder.IsConfigured ||
                (!optionsBuilder.Options.Extensions.OfType<RelationalOptionsExtension>().Any(ext => !string.IsNullOrEmpty(ext.ConnectionString) || ext.Connection != null) &&
                 !optionsBuilder.Options.Extensions.Any(ext => !(ext is RelationalOptionsExtension) && !(ext is CoreOptionsExtension))))
            {
            }
            CustomizeConfiguration(ref optionsBuilder);
            base.OnConfiguring(optionsBuilder);
        }

        partial void CustomizeConfiguration(ref DbContextOptionsBuilder optionsBuilder);

        public virtual DbSet<Foetelek> Foeteleks
        {
            get;
            set;
        }

        public virtual DbSet<Tortak> Tortaks
        {
            get;
            set;
        }

        public virtual DbSet<Sutemenyek> Sutemenyeks
        {
            get;
            set;
        }

        public virtual DbSet<Felhasznalo> Felhasznalos
        {
            get;
            set;
        }

        public virtual DbSet<Chef> Chefs
        {
            get;
            set;
        }

        protected override void OnModelCreating(ModelBuilder modelBuilder)
        {
            base.OnModelCreating(modelBuilder);

            this.FoetelekMapping(modelBuilder);
            this.CustomizeFoetelekMapping(modelBuilder);

            this.TortakMapping(modelBuilder);
            this.CustomizeTortakMapping(modelBuilder);

            this.SutemenyekMapping(modelBuilder);
            this.CustomizeSutemenyekMapping(modelBuilder);

            this.FelhasznaloMapping(modelBuilder);
            this.CustomizeFelhasznaloMapping(modelBuilder);

            this.ChefMapping(modelBuilder);
            this.CustomizeChefMapping(modelBuilder);

            RelationshipsMapping(modelBuilder);
            CustomizeMapping(ref modelBuilder);
        }

        #region Foetelek Mapping

        private void FoetelekMapping(ModelBuilder modelBuilder)
        {
            modelBuilder.Entity<Foetelek>().ToTable(@"Foeteleks");
            modelBuilder.Entity<Foetelek>().Property(x => x.f_id).HasColumnName(@"f_id").IsRequired().ValueGeneratedOnAddOrUpdate();
            modelBuilder.Entity<Foetelek>().Property(x => x.nev).HasColumnName(@"nev").IsRequired().ValueGeneratedNever().HasMaxLength(30);
            modelBuilder.Entity<Foetelek>().Property(x => x.chef_id).HasColumnName(@"chef_id").IsRequired().ValueGeneratedOnAddOrUpdate();
            modelBuilder.Entity<Foetelek>().Property(x => x.c_id).HasColumnName(@"c_id").ValueGeneratedNever();
            modelBuilder.Entity<Foetelek>().HasKey(@"f_id");
        }

        partial void CustomizeFoetelekMapping(ModelBuilder modelBuilder);

        #endregion

        #region Tortak Mapping

        private void TortakMapping(ModelBuilder modelBuilder)
        {
            modelBuilder.Entity<Tortak>().ToTable(@"Tortak");
            modelBuilder.Entity<Tortak>().Property(x => x.t_id).HasColumnName(@"t_id").IsRequired().ValueGeneratedOnAddOrUpdate();
            modelBuilder.Entity<Tortak>().Property(x => x.nev).HasColumnName(@"nev").IsRequired().ValueGeneratedNever().HasMaxLength(20);
            modelBuilder.Entity<Tortak>().Property(x => x.nyertes_ev).HasColumnName(@"nyertes_ev").IsRequired().ValueGeneratedNever();
            modelBuilder.Entity<Tortak>().Property(x => x.chef_id).HasColumnName(@"chef_id").IsRequired().ValueGeneratedNever();
            modelBuilder.Entity<Tortak>().Property(x => x.c_id).HasColumnName(@"c_id").ValueGeneratedNever();
            modelBuilder.Entity<Tortak>().HasKey(@"t_id");
        }

        partial void CustomizeTortakMapping(ModelBuilder modelBuilder);

        #endregion

        #region Sutemenyek Mapping

        private void SutemenyekMapping(ModelBuilder modelBuilder)
        {
            modelBuilder.Entity<Sutemenyek>().ToTable(@"Sutemenyek");
            modelBuilder.Entity<Sutemenyek>().Property(x => x.s_id).HasColumnName(@"s_id").IsRequired().ValueGeneratedNever();
            modelBuilder.Entity<Sutemenyek>().Property(x => x.nev).HasColumnName(@"nev").IsRequired().ValueGeneratedNever().HasMaxLength(20);
            modelBuilder.Entity<Sutemenyek>().Property(x => x.chef_id).HasColumnName(@"chef_id").IsRequired().ValueGeneratedNever();
            modelBuilder.Entity<Sutemenyek>().Property(x => x.c_id).HasColumnName(@"c_id").ValueGeneratedNever();
            modelBuilder.Entity<Sutemenyek>().HasKey(@"s_id");
        }

        partial void CustomizeSutemenyekMapping(ModelBuilder modelBuilder);

        #endregion

        #region Felhasznalo Mapping

        private void FelhasznaloMapping(ModelBuilder modelBuilder)
        {
            modelBuilder.Entity<Felhasznalo>().ToTable(@"felhasznalo");
            modelBuilder.Entity<Felhasznalo>().Property(x => x.f_id).HasColumnName(@"f_id").IsRequired().ValueGeneratedNever();
            modelBuilder.Entity<Felhasznalo>().Property(x => x.felhasznalo_n).HasColumnName(@"felhasznalo_n").IsRequired().ValueGeneratedNever().HasMaxLength(30);
            modelBuilder.Entity<Felhasznalo>().Property(x => x.f_kedvenc_id).HasColumnName(@"f_kedvenc_id").IsRequired().ValueGeneratedNever();
            modelBuilder.Entity<Felhasznalo>().Property(x => x.s_kedvenc_id).HasColumnName(@"s_kedvenc_id").IsRequired().ValueGeneratedNever();
            modelBuilder.Entity<Felhasznalo>().Property(x => x.t_kedvenc_id).HasColumnName(@"t_kedvenc_id").IsRequired().ValueGeneratedNever();
            modelBuilder.Entity<Felhasznalo>().Property(x => x.Foetelekf_id).HasColumnName(@"Foetelekf_id").ValueGeneratedNever();
            modelBuilder.Entity<Felhasznalo>().Property(x => x.s_id).HasColumnName(@"s_id").ValueGeneratedNever();
            modelBuilder.Entity<Felhasznalo>().Property(x => x.t_id).HasColumnName(@"t_id").ValueGeneratedNever();
            modelBuilder.Entity<Felhasznalo>().Property(x => x.fe_id).HasColumnName(@"fe_id").IsRequired().ValueGeneratedNever();
            modelBuilder.Entity<Felhasznalo>().HasKey(@"f_id");
        }

        partial void CustomizeFelhasznaloMapping(ModelBuilder modelBuilder);

        #endregion

        #region Chef Mapping

        private void ChefMapping(ModelBuilder modelBuilder)
        {
            modelBuilder.Entity<Chef>().ToTable(@"Chef");
            modelBuilder.Entity<Chef>().Property(x => x.c_id).HasColumnName(@"c_id").IsRequired().ValueGeneratedOnAddOrUpdate();
            modelBuilder.Entity<Chef>().Property(x => x.c_nev).HasColumnName(@"c_nev").IsRequired().ValueGeneratedNever().HasMaxLength(40);
            modelBuilder.Entity<Chef>().Property(x => x.f_keszito).HasColumnName(@"f_keszito").IsRequired().ValueGeneratedNever();
            modelBuilder.Entity<Chef>().Property(x => x.s_keszito).HasColumnName(@"s_keszito").IsRequired().ValueGeneratedNever();
            modelBuilder.Entity<Chef>().Property(x => x.t_keszito).HasColumnName(@"t_keszito").IsRequired().ValueGeneratedNever();
            modelBuilder.Entity<Chef>().HasKey(@"c_id");
        }

        partial void CustomizeChefMapping(ModelBuilder modelBuilder);

        #endregion

        private void RelationshipsMapping(ModelBuilder modelBuilder)
        {
            modelBuilder.Entity<Foetelek>().HasOne(x => x.Chef).WithMany(op => op.Foetelek).HasForeignKey(@"c_id").IsRequired(true);
            modelBuilder.Entity<Foetelek>().HasMany(x => x.Felhasznalok).WithOne(op => op.Foetelek).HasForeignKey(@"fe_id").IsRequired(true);

            modelBuilder.Entity<Tortak>().HasMany(x => x.Felhasznalok).WithOne(op => op.Tortak).HasForeignKey(@"t_id").IsRequired(true);
            modelBuilder.Entity<Tortak>().HasOne(x => x.Chef).WithMany(op => op.Tortak).HasForeignKey(@"c_id").IsRequired(true);

            modelBuilder.Entity<Sutemenyek>().HasMany(x => x.Felhasznalok).WithOne(op => op.Sutemenyek).HasForeignKey(@"s_id").IsRequired(true);
            modelBuilder.Entity<Sutemenyek>().HasOne(x => x.Chef).WithMany(op => op.Sutemenyek).HasForeignKey(@"c_id").IsRequired(true);

            modelBuilder.Entity<Felhasznalo>().HasOne(x => x.Sutemenyek).WithMany(op => op.Felhasznalok).HasForeignKey(@"s_id").IsRequired(true);
            modelBuilder.Entity<Felhasznalo>().HasOne(x => x.Tortak).WithMany(op => op.Felhasznalok).HasForeignKey(@"t_id").IsRequired(true);
            modelBuilder.Entity<Felhasznalo>().HasOne(x => x.Foetelek).WithMany(op => op.Felhasznalok).HasForeignKey(@"fe_id").IsRequired(true);

            modelBuilder.Entity<Chef>().HasMany(x => x.Foetelek).WithOne(op => op.Chef).HasForeignKey(@"c_id").IsRequired(true);
            modelBuilder.Entity<Chef>().HasMany(x => x.Sutemenyek).WithOne(op => op.Chef).HasForeignKey(@"c_id").IsRequired(true);
            modelBuilder.Entity<Chef>().HasMany(x => x.Tortak).WithOne(op => op.Chef).HasForeignKey(@"c_id").IsRequired(true);
        }

        partial void CustomizeMapping(ref ModelBuilder modelBuilder);

        public bool HasChanges()
        {
            return ChangeTracker.Entries().Any(e => e.State == Microsoft.EntityFrameworkCore.EntityState.Added || e.State == Microsoft.EntityFrameworkCore.EntityState.Modified || e.State == Microsoft.EntityFrameworkCore.EntityState.Deleted);
        }

        partial void OnCreated();
    }
}
